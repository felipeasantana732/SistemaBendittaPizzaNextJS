"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { PizzaCalculator } from "../right/listaItens";
import { Button } from "@/components/ui/button";

// --- Definição dos Tipos ---
interface Flavor {
  id: number;
  name: string;
  smallPrice: number;
  bigPrice: number;
}

interface CrustOption {
  id: number;
  name: string;
  smallPrice: number;
  bigPrice: number;
}

interface PizzaFlavorSelection {
  sabor1: string; // Armazena o ID como string
  sabor2: string; // Armazena o ID como string
}

interface OrderItem {
  id: number;
  size: string;
  sabor1: Flavor | null;
  sabor2: Flavor | null;
  crust: CrustOption | null;
}

// --- Mock Data ---
const mockFlavors: Flavor[] = [
  // ... seus sabores
  { id: 1, name: "Mussarela", smallPrice: 30, bigPrice: 50 },
  { id: 2, name: "Calabresa", smallPrice: 30, bigPrice: 45 },
  { id: 2, name: "Presunto", smallPrice: 30, bigPrice: 45 },
  { id: 2, name: "Lombo", smallPrice: 30, bigPrice: 45 },
  // ... resto
];

const mockCrustOptions: CrustOption[] = [
  // ... suas opções de borda
  { id: 1, name: "Tradicional", smallPrice: 0, bigPrice: 0 },
  { id: 2, name: "Catupiry", smallPrice: 10, bigPrice: 15 },
  { id: 2, name: "CreamCheese", smallPrice: 10, bigPrice: 15 },
  { id: 2, name: "Chocolate", smallPrice: 10, bigPrice: 15 },
  // ... resto
];

export default function PizzaStorePanel() {
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [size, setSize] = useState("grande"); // Ajuste o valor inicial se necessário (p.ex., 'big' ou 'individual')
  const [deliveryTax, setDeliveryTax] = useState("0");

  // Estado para a seleção atual da pizza sendo montada
  const [flavors, setFlavors] = useState<PizzaFlavorSelection[]>([
    { sabor1: "", sabor2: "" },
  ]);
  // Estado para a borda selecionada (armazenando o ID como string)
  const [selectedCrust, setSelectedCrust] = useState<string>("");

  // Estados para os dados que viriam da API
  const [availableFlavors, setAvailableFlavors] = useState<Flavor[]>([]); // Inicializa vazio, busca no useEffect
  const [crustOptions, setCrustOptions] = useState<CrustOption[]>([]); // Inicializa vazio, busca no useEffect

  // Estado para os itens já adicionados ao pedido
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Simulação da API - Substituir no futuro
        setAvailableFlavors(mockFlavors);
        setCrustOptions(mockCrustOptions); // Agora isso funciona!
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  const handleFlavorChange = (
    index: number,
    half: keyof PizzaFlavorSelection, // Garante que 'half' seja 'sabor1' ou 'sabor2'
    value: string
  ) => {
    const newFlavors = [...flavors];
    // Verifica se o índice existe antes de tentar acessar
    if (newFlavors[index]) {
      newFlavors[index][half] = value;
      setFlavors(newFlavors);
    }
  };

  // ... (resto da função formatCurrency)

  const handleDeliveryTaxChange = (e: React.ChangeEvent<HTMLInputElement>) => { // Adiciona tipo ao evento
    const value = e.target.value;
    if (value === "" || value === "0") {
      setDeliveryTax("0");
      return;
    }

    const formatCurrency = (value: string) => {
        // Remove non-numeric characters
        const numericValue = value.replace(/[^0-9]/g, "")
    
        // Convert to number and format as currency
        const number = Number.parseInt(numericValue, 10) / 100
        return number
          .toLocaleString("pt-BR", {
            style: "currency",
            currency: "BRL",
            minimumFractionDigits: 2,
          })
          .replace("R$", "")
          .trim()
      }
    
      const handleDeliveryTaxChange = (e: { target: { value: any; }; }) => {
        const value = e.target.value
        if (value === "" || value === "0") {
          setDeliveryTax("0")
          return
        }
    
        setDeliveryTax(formatCurrency(value))
      }
    
    // Sua função formatCurrency parece retornar string, então o estado já é string
    setDeliveryTax(formatCurrency(value));
  };


  const addPizzaToOrder = () => {
    // Validação - garante que flavors[0] existe
    if (!flavors[0] || (!flavors[0].sabor1 && !flavors[0].sabor2)) {
      alert("Por favor, selecione pelo menos um sabor de pizza.");
      return;
    }
     // Validação de Borda selecionada
    //if (!selectedCrust) { Sem borda vai automaticamente para borda padrão
      //alert("Por favor, selecione o tipo de borda.");
      //return;
   // }


    const flavor1 =
      availableFlavors.find((f) => f.id.toString() === flavors[0].sabor1) || null;
    const flavor2 =
      availableFlavors.find((f) => f.id.toString() === flavors[0].sabor2) || null;
    const crust = crustOptions.find((c) => c.id.toString() === selectedCrust) || null; // Busca pelo ID string


    // Se a borda não for encontrada (não deveria acontecer se a validação passou)
    if (!crust) {
         console.error("Erro: Borda selecionada não encontrada nas opções.");
         alert("Ocorreu um erro ao adicionar a borda. Tente novamente.");
         return;
    }


    const newPizza: OrderItem = {
      id: Date.now(), // Unique ID for the order item
      size,
      sabor1: flavor1,
      sabor2: flavor2,
      crust: crust, // Adiciona o objeto crust encontrado
    };


    setOrderItems([...orderItems, newPizza]);

    // Reset selections for next pizza
    setFlavors([{ sabor1: "", sabor2: "" }]);
    setSelectedCrust(""); // Reseta a string do ID da borda
  };

  const removePizzaFromOrder = (pizzaId: number) => { // Adiciona tipo ao ID
    setOrderItems(orderItems.filter((item) => item.id !== pizzaId));
  };


  // --- JSX ---
  return (
    <div className="flex w-full min-h-screen">
      <div className="w-3/4 p-4">
        <Card className="w-full">
          <CardHeader>
            <CardTitle>Pedido de Pizza</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Customer Information ... */}

            {/* Pizza Size ... (sem alterações necessárias aqui por enquanto) */}
             <div>
               <Label>Tamanho da Pizza</Label>
               <RadioGroup value={size} onValueChange={setSize} className="flex space-x-4 mt-2">
                 {/* Mapear opções de tamanho pode ser mais dinâmico se precisar */}
                 <div className="flex items-center space-x-2">
                   <RadioGroupItem value="individual" id="individual" />
                   <Label htmlFor="individual">Individual</Label>
                 </div>
                 <div className="flex items-center space-x-2">
                   <RadioGroupItem value="big" id="big" />
                   <Label htmlFor="big">Grande</Label>
                 </div>
               </RadioGroup>
             </div>


            {/* Delivery Tax ... */}
              <div>
                  <Label htmlFor="deliveryTax">Taxa de Entrega (R$)</Label>
                  <div className="relative mt-2"> {/* Adicionado mt-2 para espaçamento */}
                     <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">R$</span> {/* Estilização opcional */}
                      <Input
                          id="deliveryTax"
                          value={deliveryTax}
                          onChange={handleDeliveryTaxChange}
                          placeholder="0,00" // Placeholder mais claro
                          className="pl-10" // Padding para não sobrepor o "R$"
                      />
                  </div>
              </div>


            {/* Pizza Flavors */}
            <div className="space-y-4">
              <Label>Sabores</Label>
              {/* Assumindo que sempre haverá apenas uma pizza sendo configurada por vez */}
              {flavors.map((flavor, index) => (
                <div key={index} className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor={`sabor1-${index}`}>Primeira Metade</Label>
                    <Select
                      value={flavor.sabor1} // Já é string
                      onValueChange={(value) =>
                        handleFlavorChange(index, "sabor1", value)
                      }
                    >
                      <SelectTrigger id={`sabor1-${index}`}>
                        <SelectValue placeholder="Selecione o sabor" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableFlavors.map((flavorOption) => (
                          <SelectItem
                            key={flavorOption.id}
                            value={flavorOption.id.toString()} // Passa ID como string
                          >
                            {flavorOption.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                   <div>
                    <Label htmlFor={`sabor2-${index}`}>Segunda Metade (Opcional)</Label>
                     <Select
                       value={flavor.sabor2} // Já é string
                       onValueChange={(value) =>
                         handleFlavorChange(index, "sabor2", value)
                       }
                     >
                       <SelectTrigger id={`sabor2-${index}`}>
                         <SelectValue placeholder="Selecione o sabor (opcional)" />
                       </SelectTrigger>
                       <SelectContent>
                         {/* Adicionar opção "Nenhum" ou similar? */}
                         <SelectItem value="">Nenhum / Sabor único</SelectItem>
                         {availableFlavors.map((flavorOption) => (
                           <SelectItem
                             key={flavorOption.id}
                             value={flavorOption.id.toString()} // Passa ID como string
                           >
                             {flavorOption.name}
                           </SelectItem>
                         ))}
                       </SelectContent>
                     </Select>
                   </div>
                </div>
              ))}
            </div>

            {/* Stuffed Crust Options */}
            <div>
              <Label htmlFor="crust">Borda Recheada</Label>
              <Select
                value={selectedCrust} // String vazia ou ID da borda
                onValueChange={setSelectedCrust} // Recebe o ID string diretamente
              >
                <SelectTrigger id="crust">
                  <SelectValue placeholder="Selecione o tipo de borda" />
                </SelectTrigger>
                <SelectContent>
                  {crustOptions.map((option) => (
                    <SelectItem
                      key={option.id}
                      value={option.id.toString()} // Passa ID como string
                    >
                      {option.name} {/* Mostrar preço aqui pode ser confuso, melhor mostrar no resumo */}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="mt-4">
              <Button onClick={addPizzaToOrder} type="button" className="w-full">
                Adicionar Pizza ao Pedido
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Price Calculator Component */}
      <div className="w-1/4 p-4">
         <PizzaCalculator
             orderItems={orderItems}
             onRemoveItem={removePizzaFromOrder}
             // Tenta converter deliveryTax para número, tratando erro se falhar
             deliveryTax={Number.parseFloat(deliveryTax.replace(",", ".")) || 0}
         />
      </div>
    </div>
  );
}


























