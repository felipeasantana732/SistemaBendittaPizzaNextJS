"use client"

import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

export function PizzaCalculator({ orderItems, onRemoveItem, deliveryTax }) {
  // Calculate the total price based on selected flavors and size
  const calculateTotal = () => {
    let total = 0

    // Add delivery tax
    total += deliveryTax

    // Calculate price for each pizza in the order
    orderItems.forEach((item) => {
      let pizzaPrice = 0

      if (item.sabor1 && item.sabor2) {
        // If both halves are selected, average the prices
        pizzaPrice = (item.sabor1.price + item.sabor2.price) / 2
      } else if (item.sabor1) {
        // If only first half is selected
        pizzaPrice = item.sabor1.price
      } else if (item.sabor2) {
        // If only second half is selected
        pizzaPrice = item.sabor2.price
      }

      // Apply size multiplier
      if (item.size === "big") {
        pizzaPrice *= 1.8 // Big pizzas cost 80% more
      }

      // Add crust price if selected
      if (item.crust) {
        pizzaPrice += item.crust.price
      }

      total += pizzaPrice
    })

    return total
  }

  
  const formatCurrency = (value: string) => {
    // Remove non-numeric characters
    const numericValue = value.replace(/[^0-9]/g, "")

    // Convert to number and format as currency
    const number = Number.parseInt(numericValue, 10) / 100
    return number
      .toLocaleString("pt-BR", {
        style: "currency",
        currency: "BRL",
        minimumFractionDigits: 2,
      })
      .replace("R$", "")
      .trim()
  }


  }


  const total = calculateTotal()

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>Resumo do Pedido</CardTitle>
      </CardHeader>
      <CardContent className="flex-grow">
        <div className="space-y-4">
          {/* Order Items */}
          <div>
            <h3 className="font-medium mb-2">Itens do Pedido:</h3>
            {orderItems.length > 0 ? (
              <ul className="space-y-2">
                {orderItems.map((item) => (
                  <li key={item.id} className="border-b pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <p>
                          {item.sabor1 ? item.sabor1.name : ""}
                          {item.sabor1 && item.sabor2 ? " / " : ""}
                          {item.sabor2 ? item.sabor2.name : ""}
                        </p>
                        <p className="text-sm text-muted-foreground">
                          Tamanho: {item.size === "individual" ? "Individual" : "Grande"}
                        </p>
                        {item.crust && <p className="text-sm text-muted-foreground">Borda: {item.crust.name}</p>}
                      </div>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 text-destructive"
                        onClick={() => onRemoveItem(item.id)}
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="lucide lucide-trash-2"
                        >
                          <path d="M3 6h18"></path>
                          <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                          <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                          <line x1="10" y1="11" x2="10" y2="17"></line>
                          <line x1="14" y1="11" x2="14" y2="17"></line>
                        </svg>
                        <span className="sr-only">Remover</span>
                      </Button>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-muted-foreground">Nenhum item no pedido</p>
            )}
          </div>

          {/* Delivery Tax */}
          <div>
            <h3 className="font-medium mb-2">Taxa de Entrega:</h3>
            <p>{formatCurrency(deliveryTax)}</p>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex-col items-stretch border-t pt-4">
        <div className="flex justify-between items-center mb-4">
          <h3 className="font-bold text-lg">Total:</h3>
          <p className="font-bold text-lg">{formatCurrency(total)}</p>
        </div>
        <Button className="w-full">Finalizar Pedido</Button>
      </CardFooter>
    </Card>
  )
}
